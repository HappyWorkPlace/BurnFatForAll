/* =================================
   üçΩÔ∏è HARDCODE FOOD SYSTEM
   ================================= */

const HARDCODE_FOOD_LIST = [
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÑ‡∏Å‡πà‡∏â‡∏µ‡∏Å ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÑ‡∏Å‡πà‡∏°‡∏∞‡∏£‡∏∞ ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πä‡∏¢‡∏ß‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏ß‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏á ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡πÄ‡∏à‡∏µ‡∏¢‡∏ß",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏•‡∏∏‡∏¢‡∏™‡∏ß‡∏ô",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏ï‡∏∏‡πã‡∏ô, ‡πÑ‡∏Å‡πà‡∏ï‡∏∏‡πã‡∏ô ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏ô‡πâ‡∏≥‡∏ï‡∏Å, ‡∏ô‡πâ‡∏≥‡πÉ‡∏™ ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß ‡∏≠‡∏Å‡πÑ‡∏Å‡πà  ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°",
    "‡∏Å‡∏∞‡∏´‡∏•‡πà‡∏≥‡∏õ‡∏•‡∏µ‡∏ú‡∏±‡∏î‡πÑ‡∏Ç‡πà",
    "‡∏Å‡∏∏‡πâ‡∏á‡∏≠‡∏ö‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    "‡πÄ‡∏Å‡∏≤‡πÄ‡∏´‡∏•‡∏≤",
    "‡πÄ‡∏Å‡∏µ‡πä‡∏¢‡∏ß‡∏≠‡∏Å‡πÑ‡∏Å‡πà",
    "‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡πÑ‡∏Å‡πà",
    "‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏™‡∏≤‡∏´‡∏£‡πà‡∏≤‡∏¢",
    "‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡∏°‡∏∞‡∏£‡∏∞",
    "‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î",
    "‡πÅ‡∏Å‡∏á‡πÑ‡∏ï‡∏õ‡∏•‡∏≤",
    "‡πÅ‡∏Å‡∏á‡∏õ‡πà‡∏≤",
    "‡πÅ‡∏Å‡∏á‡πÄ‡∏õ‡∏£‡∏≠‡∏∞",
    "‡πÅ‡∏Å‡∏á‡πÄ‡∏•‡∏µ‡∏¢‡∏á",
    "‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°",
    "‡πÅ‡∏Å‡∏á‡∏´‡∏ô‡πà‡∏≠‡πÑ‡∏°‡πâ‡πÉ‡∏ö‡∏¢‡πà‡∏≤‡∏ô‡∏≤‡∏á",
    "‡πÅ‡∏Å‡∏á‡∏´‡∏ô‡πà‡∏≠‡πÑ‡∏°‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Å‡∏∞‡∏ó‡∏¥)",
    "‡πÅ‡∏Å‡∏á‡πÄ‡∏´‡πá‡∏î",
    "‡πÅ‡∏Å‡∏á‡∏≠‡πà‡∏≠‡∏°",
    "‡πÑ‡∏Å‡πà‡∏ï‡πâ‡∏°",
    "‡πÑ‡∏Å‡πà‡πÉ‡∏ï‡πâ‡∏ô‡πâ‡∏≥",
    "‡πÑ‡∏Å‡πà‡∏ú‡∏±‡∏î‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ",
    "‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏ï‡∏Å",
    "‡πÑ‡∏Å‡πà‡∏£‡∏ß‡∏ô‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤",
    "‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô‡πÅ‡∏Å‡∏á‡πÑ‡∏ï‡∏õ‡∏•‡∏≤",
    "‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô‡∏ô‡πâ‡∏≥‡∏¢‡∏≤‡∏õ‡πà‡∏≤",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏ó‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏•‡∏á‡πÄ‡∏£‡∏∑‡∏≠",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà‡∏ï‡πâ‡∏° (‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏ß‡∏¢)",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏Å‡πà‡∏ï‡πâ‡∏°",
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏π‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß",
    "‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°",
    "‡πÑ‡∏Ç‡πà‡∏ï‡∏∏‡πã‡∏ô",
    "‡πÇ‡∏à‡πä‡∏Å",
    "‡∏ã‡∏∏‡∏õ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏¢‡∏≤‡∏ß",
    "‡∏ï‡πâ‡∏°‡πÑ‡∏Å‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏ö‡∏°‡∏∞‡∏Ç‡∏≤‡∏°‡∏≠‡πà‡∏≠‡∏ô",
    "‡∏ï‡πâ‡∏°‡πÇ‡∏Ñ‡∏•‡πâ‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡πà‡∏≤‡∏á",
    "‡∏ï‡πâ‡∏°‡∏à‡∏±‡∏ö‡∏â‡πà‡∏≤‡∏¢",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÑ‡∏Ç‡πà‡∏ô‡πâ‡∏≥",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏ï‡∏≥‡∏•‡∏∂‡∏á",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏ü‡∏±‡∏Å",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏°‡∏∞‡∏£‡∏∞",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏°‡∏π",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    "‡∏ï‡πâ‡∏°‡∏à‡∏∑‡∏î‡∏´‡∏ô‡πà‡∏≠‡πÑ‡∏°‡πâ",
    "‡∏ï‡πâ‡∏°‡∏ã‡∏∏‡∏õ‡∏õ‡∏•‡∏≤, ‡∏ï‡πâ‡∏°‡∏ã‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠",
    "‡∏ï‡πâ‡∏°‡πÅ‡∏ã‡πà‡∏ö",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏´‡∏°‡∏π",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏™",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏´‡πá‡∏î‡∏ô‡πâ‡∏≥‡πÉ‡∏™",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÑ‡∏Å‡πà",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÑ‡∏Ç‡πà‡∏ô‡πâ‡∏≥",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÇ‡∏Ñ‡∏£‡∏á‡πÅ‡∏Å‡πâ‡∏ß",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏õ‡∏•‡∏≤‡∏ô‡∏¥‡∏•‡∏ô‡πâ‡∏≥‡πÉ‡∏™",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏õ‡∏•‡∏≤‡∏¢‡πà‡∏≤‡∏á",
    "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡πÉ‡∏™‡πà‡πÄ‡∏´‡πá‡∏î",
    "‡∏ï‡πâ‡∏°‡πÄ‡∏•‡πâ‡∏á",
    "‡∏ï‡πâ‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏°‡∏π",
    "‡∏ï‡πâ‡∏°‡∏™‡πâ‡∏°‡∏õ‡∏•‡∏≤‡∏ô‡∏¥‡∏•",
    "‡∏ï‡∏±‡∏ö‡∏´‡∏ß‡∏≤‡∏ô",
    "‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î",
    "‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•",
    "‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢‡πÑ‡∏´‡∏•‡∏ö‡∏±‡∏ß",
    "‡∏ï‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ",
    "‡πÄ‡∏ï‡πâ‡∏≤‡πÄ‡∏à‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏•‡∏ô + ‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°",
    "‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÑ‡∏Ç‡πà(‡πÑ‡∏°‡πà‡∏ó‡∏≠‡∏î)‡∏ó‡∏£‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "‡∏ó‡∏π‡∏ô‡πà‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏ô‡∏™‡∏•‡∏±‡∏î",
    "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á",
    "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏´‡∏°‡∏π",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥ + ‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏° + ‡∏ä‡∏∞‡∏≠‡∏°",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥ ‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥ ‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏õ‡∏•‡∏≤‡∏£‡πâ‡∏≤ +‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡πÄ‡∏ú‡∏≤ + ‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏°‡∏∞‡∏Ç‡∏≤‡∏° ‡∏ú‡∏±‡∏Å‡∏•‡∏ß‡∏Å",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏´‡∏ô‡∏∏‡πà‡∏° ‡∏ú‡∏±‡∏Å‡∏•‡∏ß‡∏Å",
    "‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏≠‡πà‡∏≠‡∏á ‡∏ú‡∏±‡∏Å‡∏•‡∏ß‡∏Å",
    "‡∏õ‡∏•‡∏≤‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏¥‡πâ‡∏°‡πÅ‡∏à‡πà‡∏ß",
    "‡∏õ‡∏•‡∏≤‡∏ô‡∏∂‡πà‡∏á ‡∏ú‡∏±‡∏Å‡∏•‡∏ß‡∏Å",
    "‡∏õ‡∏•‡∏≤‡∏ô‡∏∂‡πà‡∏á/‡∏¢‡πà‡∏≤‡∏á",
    "‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß‡∏•‡∏∏‡∏¢‡∏™‡∏ß‡∏ô",
    "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡∏´‡∏•‡πà‡∏≥‡∏õ‡∏•‡∏µ",
    "‡∏ú‡∏±‡∏î‡∏Ç‡∏¥‡∏á",
    "‡∏ú‡∏±‡∏î‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤",
    "‡∏ú‡∏±‡∏î‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà",
    "‡∏ú‡∏±‡∏î‡∏ñ‡∏±‡πà‡∏ß‡∏á‡∏≠‡∏Å‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ",
    "‡∏ú‡∏±‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏Ñ‡∏•‡∏µ‡πà",
    "‡∏ú‡∏±‡∏î‡∏ö‡∏ß‡∏ö‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà",
    "‡∏ú‡∏±‡∏î‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô",
    "‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á",
    "‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°",
    "‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏π",
    "‡∏ú‡∏±‡∏î‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á",
    "‡∏ú‡∏±‡∏î‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà",
    "‡∏ú‡∏±‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏≠‡∏Å‡πÑ‡∏Å‡πà",
    "‡∏ú‡∏±‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡∏≠‡πà‡∏≠‡∏ô",
    "‡∏ú‡∏±‡∏î‡∏°‡∏∞‡∏£‡∏∞‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà",
    "‡∏ú‡∏±‡∏î‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    "‡∏ú‡∏±‡∏î‡∏™‡∏≤‡∏¢‡∏ö‡∏±‡∏ß‡πÉ‡∏™‡πà‡πÑ‡∏Å‡πà",
    "‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á‡∏ô‡∏∂‡πà‡∏á/ ‡∏°‡∏±‡∏ô‡∏ô‡∏∂‡πà‡∏á",
    "‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏¢‡∏≥‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô",
    "‡∏¢‡∏≥‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°",
    "‡∏¢‡∏≥‡∏õ‡∏•‡∏≤‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á",
    "‡∏¢‡∏≥‡∏õ‡∏•‡∏≤‡∏ó‡∏π",
    "‡∏¢‡∏≥‡∏ú‡∏±‡∏Å‡∏´‡∏ß‡∏≤‡∏ô",
    "‡∏¢‡∏≥‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£",
    "‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    "‡∏¢‡∏≥‡πÄ‡∏´‡πá‡∏î",
    "‡∏•‡∏≤‡∏ö‡πÑ‡∏Å‡πà",
    "‡∏•‡∏≤‡∏ö‡∏õ‡∏•‡∏≤‡∏î‡∏∏‡∏Å",
    "‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π",
    "‡∏•‡∏≤‡∏ö‡πÄ‡∏´‡πá‡∏î",
    "‡∏•‡∏≤‡∏ö‡∏≠‡∏Å‡πÑ‡∏Å‡πà",
    "‡∏•‡∏∏‡∏¢‡∏™‡∏ß‡∏ô",
    "‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á",
    "‡∏™‡πÄ‡∏ï‡πá‡∏Å",
    "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•",
    "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏á‡∏ä‡∏π‡∏£‡∏™",
    "‡∏™‡∏•‡∏±‡∏î‡πÇ‡∏£‡∏•",
    "‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•",
    "‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£",
    "‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏°‡∏π‡πÑ‡∏Å‡πà",
    "‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°",
    "‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢‡∏á‡πÑ‡∏Æ‡∏ï‡∏∏‡πã‡∏ô‡∏¢‡∏≤‡∏à‡∏µ‡∏ô",
    "‡∏´‡∏°‡∏π‡∏°‡∏∞‡∏ô‡∏≤‡∏ß",
    "‡πÄ‡∏´‡πá‡∏î‡∏¢‡πà‡∏≤‡∏á",
    "‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏ô‡∏∂‡πà‡∏á",
    "‡∏≠‡∏Å‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á"
];

/* =================================
   üçΩÔ∏è FOOD SYSTEM
   ================================= */
const Food = {
    async loadFoodList() {
        try {
            console.log('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å hardcode...');
            
            // Filter ‡πÅ‡∏•‡∏∞ validate food list
            validFoodList = HARDCODE_FOOD_LIST.filter(food => 
                food && food.trim() !== '' && food !== '-'
            );
            
            console.log('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', validFoodList.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
            
            // Populate dropdown
            this.populateDropdown(validFoodList);
            
            return validFoodList;
        } catch (error) {
            console.error('Error loading hardcode food list:', error);
            validFoodList = [];
            this.populateDropdown(validFoodList);
            throw error;
        }
    },

    populateDropdown(foodList) {
        const dropdownList = document.getElementById('foodDropdown');
        if (!dropdownList) return;
        
        dropdownList.innerHTML = '';
        
        foodList.forEach(food => {
            const item = document.createElement('div');
            item.className = 'dropdown-item';
            item.textContent = food;
            dropdownList.appendChild(item);
        });
    },

    validateFood(foodName) {
        if (!foodName || foodName.trim() === '') {
            return {
                isValid: false,
                message: '',
                showIcon: false
            };
        }

        const trimmedFood = foodName.trim();
        const isValid = validFoodList.some(food => 
            food.toLowerCase() === trimmedFood.toLowerCase()
        );

        return {
            isValid,
            message: isValid ? '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úì' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
            showIcon: true
        };
    },

    async recordSelection() {
        if (isSubmitting) {
            console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠...');
            return;
        }

        if (!userData || !selectedFood) {
            Swal.fire({
                title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
                icon: 'warning',
                confirmButtonColor: '#10b981'
            });
            return;
        }

        const validation = this.validateFood(selectedFood);
        if (!validation.isValid) {
            Swal.fire({
                title: '‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
                icon: 'error',
                confirmButtonColor: '#10b981'
            });
            return;
        }

        isSubmitting = true;
        UI.updateRecordButton(selectedFood);

        Swal.fire({
            title: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏£‡∏∂‡∏¢‡∏±‡∏á‡∏ô‡πâ‡∏≤...',
            text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        try {
            const profile = await liff.getProfile();
            const uid = profile.userId;
            await this.checkAndSave(uid, userData[1], userData[4], selectedFood, userData[2]);
        } catch (error) {
            console.error('Failed to get user profile:', error);
            this.resetSubmitting();
            Swal.fire('Error', 'Failed to get user profile. Please try again later.', 'error');
        }
    },

    async checkAndSave(uid, empNo, factory, selectedFood, name) {
        try {
            const response = await API.checkUserColumnJ(uid);
            Swal.close();
            
            if (response.status === 'TRUE') {
                await this.saveSelection(empNo, factory, selectedFood, uid, name);
            } else if (response.status === 'FALSE') {
                this.resetSubmitting();
                Swal.fire({
                    title: '‡πÅ‡∏¢‡πà‡∏à‡∏±‡∏á..',
                    html: `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${new Date(response.lastTimestamp).toLocaleString()} ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏≠‡∏¢‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞ <br><img src="https://raw.githubusercontent.com/HappyWorkPlace/BurnFatForAll/main/picture/healthy-food_error.png" alt="icon" style="width:100px;height:100px;">`
                });
            } else {
                this.resetSubmitting();
                Swal.fire('Error', 'Failed to check user status.', 'error');
            }
        } catch (error) {
            console.error('Error checking user status:', error);
            this.resetSubmitting();
            Swal.fire('Error', 'Failed to check user status. Please try again later.', 'error');
        }
    },

    async saveSelection(empNo, factory, selectedFood, uid, name) {
        Swal.fire({
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            text: '‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        try {
            const response = await API.saveRedeemData(empNo, factory, selectedFood, name);
            Swal.close();
            
            if (response.success) {
                // Add points and update UI
                userPoints += 5;
                UI.updatePointsDisplay(userPoints);
                
                Swal.fire({
                    title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                    html: '<img src="https://raw.githubusercontent.com/HappyWorkPlace/BurnFatForAll/main/picture/healthy-food_1.png" alt="success" style="width:100px;height:100px;"><p>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß +5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</p>',
                    showConfirmButton: true,
                    confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
                });
                
                this.resetForm();
                Gift.updateGiftButtons(userPoints);
            } else {
                Swal.fire('Error', response.message || 'Failed to save data.', 'error');
            }
        } catch (error) {
            console.error('Error saving data:', error);
            Swal.fire('Error', `Network error: ${error.message}`, 'error');
        } finally {
            this.resetSubmitting();
        }
    },

    resetForm() {
        const foodSearch = document.getElementById('foodSearch');
        if (foodSearch) {
            foodSearch.value = '';
            foodSearch.classList.remove('valid-food', 'invalid-food');
        }
        selectedFood = '';
        
        const statusContainer = document.querySelector('.validation-status');
        if (statusContainer) {
            statusContainer.textContent = '';
        }
    },

    resetSubmitting() {
        isSubmitting = false;
        UI.updateRecordButton('');
    }
};
